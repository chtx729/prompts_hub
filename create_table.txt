-- ==========================================
-- AI提示词网站数据库设计
-- 数据库名称: prompt_website_db
-- 创建时间: 2025年
-- ==========================================

-- ==========================================
-- 1. 用户表 (users)
-- 存储用户基本信息
-- ==========================================
CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    nickname VARCHAR(50),
    avatar_url VARCHAR(255),
    bio TEXT,
    role TEXT DEFAULT 'user' CHECK (role IN ('user', 'admin', 'moderator')),
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'banned')),
    email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_login_at TIMESTAMP WITH TIME ZONE
);

COMMENT ON TABLE users IS '用户表';
COMMENT ON COLUMN users.user_id IS '用户ID';
COMMENT ON COLUMN users.username IS '用户名';
COMMENT ON COLUMN users.email IS '邮箱';
COMMENT ON COLUMN users.password_hash IS '密码哈希';
COMMENT ON COLUMN users.nickname IS '昵称';
COMMENT ON COLUMN users.avatar_url IS '头像URL';
COMMENT ON COLUMN users.bio IS '个人简介';
COMMENT ON COLUMN users.role IS '用户角色';
COMMENT ON COLUMN users.status IS '账户状态';
COMMENT ON COLUMN users.email_verified IS '邮箱是否验证';
COMMENT ON COLUMN users.created_at IS '创建时间';
COMMENT ON COLUMN users.updated_at IS '更新时间';
COMMENT ON COLUMN users.last_login_at IS '最后登录时间';

CREATE INDEX idx_username ON users (username);
CREATE INDEX idx_email ON users (email);
CREATE INDEX idx_created_at ON users (created_at);

-- Trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 2. 提示词分类表 (categories)
-- 存储提示词分类信息
-- ==========================================
CREATE TABLE categories (
    category_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    slug VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    icon VARCHAR(100),
    color VARCHAR(50),
    sort_order INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE categories IS '提示词分类表';
COMMENT ON COLUMN categories.category_id IS '分类ID';
COMMENT ON COLUMN categories.name IS '分类名称';
COMMENT ON COLUMN categories.slug IS '分类别名(URL友好)';
COMMENT ON COLUMN categories.description IS '分类描述';
COMMENT ON COLUMN categories.icon IS '分类图标';
COMMENT ON COLUMN categories.color IS '分类颜色';
COMMENT ON COLUMN categories.sort_order IS '排序顺序';
COMMENT ON COLUMN categories.is_active IS '是否启用';
COMMENT ON COLUMN categories.created_at IS '创建时间';
COMMENT ON COLUMN categories.updated_at IS '更新时间';

CREATE INDEX idx_slug ON categories (slug);
CREATE INDEX idx_sort_order ON categories (sort_order);
CREATE INDEX idx_is_active ON categories (is_active);

-- Trigger for updated_at
CREATE TRIGGER update_categories_updated_at
BEFORE UPDATE ON categories
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 3. 提示词表 (prompts)
-- 存储提示词主要信息
-- ==========================================
CREATE TABLE prompts (
    prompt_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    slug VARCHAR(200) NOT NULL UNIQUE,
    description TEXT,
    content TEXT NOT NULL,
    category_id INT NOT NULL,
    author_id INT NOT NULL,
    
    view_count INT DEFAULT 0,
    use_count INT DEFAULT 0,
    like_count INT DEFAULT 0,
    favorite_count INT DEFAULT 0,
    rating_average DECIMAL(3,2) DEFAULT 0.00,
    rating_count INT DEFAULT 0,
    
    status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'published', 'reviewing', 'rejected')),
    is_featured BOOLEAN DEFAULT FALSE,
    is_public BOOLEAN DEFAULT TRUE,
    
    published_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE RESTRICT,
    FOREIGN KEY (author_id) REFERENCES users(user_id) ON DELETE RESTRICT
);

COMMENT ON TABLE prompts IS '提示词表';
COMMENT ON COLUMN prompts.prompt_id IS '提示词ID';
COMMENT ON COLUMN prompts.title IS '提示词标题';
COMMENT ON COLUMN prompts.slug IS '提示词别名(URL友好)';
COMMENT ON COLUMN prompts.description IS '提示词描述';
COMMENT ON COLUMN prompts.content IS '提示词内容';
COMMENT ON COLUMN prompts.category_id IS '分类ID';
COMMENT ON COLUMN prompts.author_id IS '作者ID';
COMMENT ON COLUMN prompts.view_count IS '查看次数';
COMMENT ON COLUMN prompts.use_count IS '使用次数';
COMMENT ON COLUMN prompts.like_count IS '点赞次数';
COMMENT ON COLUMN prompts.favorite_count IS '收藏次数';
COMMENT ON COLUMN prompts.rating_average IS '平均评分';
COMMENT ON COLUMN prompts.rating_count IS '评分次数';
COMMENT ON COLUMN prompts.status IS '状态';
COMMENT ON COLUMN prompts.is_featured IS '是否精选';
COMMENT ON COLUMN prompts.is_public IS '是否公开';
COMMENT ON COLUMN prompts.published_at IS '发布时间';
COMMENT ON COLUMN prompts.created_at IS '创建时间';
COMMENT ON COLUMN prompts.updated_at IS '更新时间';

CREATE INDEX idx_slug ON prompts (slug);
CREATE INDEX idx_category_id ON prompts (category_id);
CREATE INDEX idx_author_id ON prompts (author_id);
CREATE INDEX idx_status ON prompts (status);
CREATE INDEX idx_is_featured ON prompts (is_featured);
CREATE INDEX idx_published_at ON prompts (published_at);
CREATE INDEX idx_view_count ON prompts (view_count);
CREATE INDEX idx_use_count ON prompts (use_count);
CREATE INDEX idx_rating_average ON prompts (rating_average);

-- Trigger for updated_at
CREATE TRIGGER update_prompts_updated_at
BEFORE UPDATE ON prompts
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 4. 提示词标签表 (tags)
-- 存储标签信息
-- ==========================================
CREATE TABLE tags (
    tag_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    slug VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    use_count INT DEFAULT 0,
    color VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE tags IS '标签表';
COMMENT ON COLUMN tags.tag_id IS '标签ID';
COMMENT ON COLUMN tags.name IS '标签名称';
COMMENT ON COLUMN tags.slug IS '标签别名';
COMMENT ON COLUMN tags.description IS '标签描述';
COMMENT ON COLUMN tags.use_count IS '使用次数';
COMMENT ON COLUMN tags.color IS '标签颜色';
COMMENT ON COLUMN tags.created_at IS '创建时间';

CREATE INDEX idx_name ON tags (name);
CREATE INDEX idx_slug ON tags (slug);
CREATE INDEX idx_use_count ON tags (use_count);

-- ==========================================
-- 5. 提示词标签关联表 (prompt_tags)
-- 多对多关系表
-- ==========================================
CREATE TABLE prompt_tags (
    prompt_id INT NOT NULL,
    tag_id INT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (prompt_id, tag_id),
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(tag_id) ON DELETE CASCADE
);

COMMENT ON TABLE prompt_tags IS '提示词标签关联表';
COMMENT ON COLUMN prompt_tags.prompt_id IS '提示词ID';
COMMENT ON COLUMN prompt_tags.tag_id IS '标签ID';
COMMENT ON COLUMN prompt_tags.created_at IS '创建时间';

CREATE INDEX idx_prompt_id ON prompt_tags (prompt_id);
CREATE INDEX idx_tag_id ON prompt_tags (tag_id);

-- ==========================================
-- 6. 用户收藏表 (user_favorites)
-- 存储用户收藏的提示词
-- ==========================================
CREATE TABLE user_favorites (
    favorite_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    prompt_id INT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    
    UNIQUE (user_id, prompt_id)
);

COMMENT ON TABLE user_favorites IS '用户收藏表';
COMMENT ON COLUMN user_favorites.favorite_id IS '收藏ID';
COMMENT ON COLUMN user_favorites.user_id IS '用户ID';
COMMENT ON COLUMN user_favorites.prompt_id IS '提示词ID';
COMMENT ON COLUMN user_favorites.created_at IS '收藏时间';

CREATE INDEX idx_user_id ON user_favorites (user_id);
CREATE INDEX idx_prompt_id ON user_favorites (prompt_id);
CREATE INDEX idx_created_at ON user_favorites (created_at);

-- ==========================================
-- 7. 用户点赞表 (user_likes)
-- 存储用户点赞记录
-- ==========================================
CREATE TABLE user_likes (
    like_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    prompt_id INT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    
    UNIQUE (user_id, prompt_id)
);

COMMENT ON TABLE user_likes IS '用户点赞表';
COMMENT ON COLUMN user_likes.like_id IS '点赞ID';
COMMENT ON COLUMN user_likes.user_id IS '用户ID';
COMMENT ON COLUMN user_likes.prompt_id IS '提示词ID';
COMMENT ON COLUMN user_likes.created_at IS '点赞时间';

CREATE INDEX idx_user_id ON user_likes (user_id);
CREATE INDEX idx_prompt_id ON user_likes (prompt_id);

-- ==========================================
-- 8. 用户评分表 (user_ratings)
-- 存储用户对提示词的评分
-- ==========================================
CREATE TABLE user_ratings (
    rating_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INT NOT NULL,
    prompt_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    review TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    
    UNIQUE (user_id, prompt_id)
);

COMMENT ON TABLE user_ratings IS '用户评分表';
COMMENT ON COLUMN user_ratings.rating_id IS '评分ID';
COMMENT ON COLUMN user_ratings.user_id IS '用户ID';
COMMENT ON COLUMN user_ratings.prompt_id IS '提示词ID';
COMMENT ON COLUMN user_ratings.rating IS '评分(1-5)';
COMMENT ON COLUMN user_ratings.review IS '评价内容';
COMMENT ON COLUMN user_ratings.created_at IS '评分时间';
COMMENT ON COLUMN user_ratings.updated_at IS '更新时间';

CREATE INDEX idx_user_id ON user_ratings (user_id);
CREATE INDEX idx_prompt_id ON user_ratings (prompt_id);
CREATE INDEX idx_rating ON user_ratings (rating);

-- Trigger for updated_at
CREATE TRIGGER update_user_ratings_updated_at
BEFORE UPDATE ON user_ratings
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 9. 使用记录表 (usage_logs)
-- 记录提示词使用情况
-- ==========================================
CREATE TABLE usage_logs (
    log_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    prompt_id INT NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    action_type TEXT NOT NULL CHECK (action_type IN ('view', 'copy', 'use')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE
);

COMMENT ON TABLE usage_logs IS '使用记录表';
COMMENT ON COLUMN usage_logs.log_id IS '日志ID';
COMMENT ON COLUMN usage_logs.user_id IS '用户ID(可为空,匿名用户)';
COMMENT ON COLUMN usage_logs.prompt_id IS '提示词ID';
COMMENT ON COLUMN usage_logs.ip_address IS 'IP地址';
COMMENT ON COLUMN usage_logs.user_agent IS '用户代理';
COMMENT ON COLUMN usage_logs.action_type IS '操作类型';
COMMENT ON COLUMN usage_logs.created_at IS '操作时间';

CREATE INDEX idx_user_id ON usage_logs (user_id);
CREATE INDEX idx_prompt_id ON usage_logs (prompt_id);
CREATE INDEX idx_action_type ON usage_logs (action_type);
CREATE INDEX idx_created_at ON usage_logs (created_at);

-- ==========================================
-- 10. 评论表 (comments)
-- 存储用户评论
-- ==========================================
CREATE TABLE comments (
    comment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prompt_id INT NOT NULL,
    user_id INT NOT NULL,
    parent_id INT NULL,
    content TEXT NOT NULL,
    like_count INT DEFAULT 0,
    status TEXT DEFAULT 'published' CHECK (status IN ('published', 'hidden', 'pending')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (prompt_id) REFERENCES prompts(prompt_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_id) REFERENCES comments(comment_id) ON DELETE CASCADE
);

COMMENT ON TABLE comments IS '评论表';
COMMENT ON COLUMN comments.comment_id IS '评论ID';
COMMENT ON COLUMN comments.prompt_id IS '提示词ID';
COMMENT ON COLUMN comments.user_id IS '用户ID';
COMMENT ON COLUMN comments.parent_id IS '父评论ID(用于回复)';
COMMENT ON COLUMN comments.content IS '评论内容';
COMMENT ON COLUMN comments.like_count IS '点赞数';
COMMENT ON COLUMN comments.status IS '状态';
COMMENT ON COLUMN comments.created_at IS '创建时间';
COMMENT ON COLUMN comments.updated_at IS '更新时间';

CREATE INDEX idx_prompt_id ON comments (prompt_id);
CREATE INDEX idx_user_id ON comments (user_id);
CREATE INDEX idx_parent_id ON comments (parent_id);
CREATE INDEX idx_status ON comments (status);
CREATE INDEX idx_created_at ON comments (created_at);

-- Trigger for updated_at
CREATE TRIGGER update_comments_updated_at
BEFORE UPDATE ON comments
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 11. 系统配置表 (system_configs)
-- 存储网站配置信息
-- ==========================================
CREATE TABLE system_configs (
    config_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL UNIQUE,
    config_value TEXT,
    config_type VARCHAR(50) DEFAULT 'string',
    description TEXT,
    is_public BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON TABLE system_configs IS '系统配置表';
COMMENT ON COLUMN system_configs.config_id IS '配置ID';
COMMENT ON COLUMN system_configs.config_key IS '配置键';
COMMENT ON COLUMN system_configs.config_value IS '配置值';
COMMENT ON COLUMN system_configs.config_type IS '配置类型';
COMMENT ON COLUMN system_configs.description IS '配置描述';
COMMENT ON COLUMN system_configs.is_public IS '是否公开';
COMMENT ON COLUMN system_configs.created_at IS '创建时间';
COMMENT ON COLUMN system_configs.updated_at IS '更新时间';

CREATE INDEX idx_config_key ON system_configs (config_key);
CREATE INDEX idx_is_public ON system_configs (is_public);

-- Trigger for updated_at
CREATE TRIGGER update_system_configs_updated_at
BEFORE UPDATE ON system_configs
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- 初始化数据
-- ==========================================

-- 插入分类数据
INSERT INTO categories (name, slug, description, icon, color, sort_order) VALUES
('写作助手', 'writing', '文章、博客、创意写作相关提示词', 'fas fa-pen-fancy', '#f093fb', 1),
('编程开发', 'programming', '代码生成、调试、优化相关提示词', 'fas fa-code', '#4facfe', 2),
('营销推广', 'marketing', '文案、广告、社媒内容相关提示词', 'fas fa-bullhorn', '#fa709a', 3),
('学习教育', 'education', '解题、总结、学习计划相关提示词', 'fas fa-graduation-cap', '#43e97b', 4),
('商业分析', 'business', '市场分析、商业策略相关提示词', 'fas fa-chart-line', '#764ba2', 5),
('创意设计', 'design', '设计灵感、创意思路相关提示词', 'fas fa-palette', '#ff6b6b', 6);

-- 插入管理员用户
INSERT INTO users (username, email, password_hash, nickname, role, email_verified) VALUES
('admin', 'admin@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', '管理员', 'admin', TRUE);

-- 插入示例提示词
INSERT INTO prompts (title, slug, description, content, category_id, author_id, status, is_featured, published_at) VALUES
('专业文章写作助手', 'professional-writing-assistant', '帮助您创作结构清晰、逻辑严密的专业文章，支持多种文体和风格调整', 
'你是一位专业的写作助手，请帮我写一篇关于[主题]的文章。要求：\n1. 文章结构清晰，包含引言、主体和结论\n2. 逻辑严密，论点明确\n3. 语言专业且易懂\n4. 字数控制在[字数]字左右\n5. 适合[目标读者]阅读', 
1, 1, 'published', TRUE, NOW()),

('代码优化专家', 'code-optimization-expert', '分析您的代码并提供优化建议，包括性能提升、可读性改进和最佳实践', 
'你是一位资深的代码优化专家，请帮我分析以下代码并提供优化建议：\n[代码内容]\n\n请从以下方面进行分析：\n1. 性能优化\n2. 代码可读性\n3. 最佳实践\n4. 潜在bug\n5. 重构建议', 
2, 1, 'published', TRUE, NOW()),

('社交媒体文案大师', 'social-media-copywriter', '创作吸引人的社交媒体内容，提高互动率和转化率，适合各大平台', 
'你是一位经验丰富的社交媒体文案专家，请为[品牌/产品]创作一系列社交媒体内容：\n\n目标平台：[平台名称]\n目标受众：[受众描述]\n营销目标：[具体目标]\n\n请创作：\n1. 吸引眼球的标题\n2. 引人入胜的正文\n3. 相关话题标签\n4. 行动号召语句', 
3, 1, 'published', TRUE, NOW());

-- 插入标签数据
INSERT INTO tags (name, slug, description, color) VALUES
('写作', 'writing', '文章写作相关', '#3b82f6'),
('代码', 'coding', '编程代码相关', '#10b981'),
('营销', 'marketing', '营销推广相关', '#f59e0b'),
('教育', 'education', '学习教育相关', '#8b5cf6'),
('AI', 'ai', '人工智能相关', '#ef4444'),
('创意', 'creative', '创意设计相关', '#06b6d4');

-- 插入提示词标签关联
INSERT INTO prompt_tags (prompt_id, tag_id) VALUES
(1, 1), (1, 5),
(2, 2), (2, 5),
(3, 3), (3, 5);

-- 插入系统配置
INSERT INTO system_configs (config_key, config_value, config_type, description, is_public) VALUES
('site_name', 'AI提示词宝库', 'string', '网站名称', TRUE),
('site_description', '发现最佳AI提示词，让您的AI更智能、更高效', 'string', '网站描述', TRUE),
('prompts_per_page', '12', 'integer', '每页显示提示词数量', FALSE),
('allow_user_submit', 'true', 'boolean', '是否允许用户提交提示词', FALSE),
('require_email_verification', 'true', 'boolean', '是否需要邮箱验证', FALSE);

-- 插入管理员用户
INSERT INTO users (username, email, password_hash, nickname, role, email_verified) VALUES
('admin', 'admin@example.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', '管理员', 'admin', TRUE);

-- 插入示例提示词
INSERT INTO prompts (title, slug, description, content, category_id, author_id, status, is_featured, published_at) VALUES
('专业文章写作助手', 'professional-writing-assistant', '帮助您创作结构清晰、逻辑严密的专业文章，支持多种文体和风格调整', 
'你是一位专业的写作助手，请帮我写一篇关于[主题]的文章。要求：\n1. 文章结构清晰，包含引言、主体和结论\n2. 逻辑严密，论点明确\n3. 语言专业且易懂\n4. 字数控制在[字数]字左右\n5. 适合[目标读者]阅读', 
1, 1, 'published', TRUE, NOW()),

('代码优化专家', 'code-optimization-expert', '分析您的代码并提供优化建议，包括性能提升、可读性改进和最佳实践', 
'你是一位资深的代码优化专家，请帮我分析以下代码并提供优化建议：\n[代码内容]\n\n请从以下方面进行分析：\n1. 性能优化\n2. 代码可读性\n3. 最佳实践\n4. 潜在bug\n5. 重构建议', 
2, 1, 'published', TRUE, NOW()),

('社交媒体文案大师', 'social-media-copywriter', '创作吸引人的社交媒体内容，提高互动率和转化率，适合各大平台', 
'你是一位经验丰富的社交媒体文案专家，请为[品牌/产品]创作一系列社交媒体内容：\n\n目标平台：[平台名称]\n目标受众：[受众描述]\n营销目标：[具体目标]\n\n请创作：\n1. 吸引眼球的标题\n2. 引人入胜的正文\n3. 相关话题标签\n4. 行动号召语句', 
3, 1, 'published', TRUE, NOW());

-- 插入标签数据
INSERT INTO tags (name, slug, description, color) VALUES
('写作', 'writing', '文章写作相关', '#3b82f6'),
('代码', 'coding', '编程代码相关', '#10b981'),
('营销', 'marketing', '营销推广相关', '#f59e0b'),
('教育', 'education', '学习教育相关', '#8b5cf6'),
('AI', 'ai', '人工智能相关', '#ef4444'),
('创意', 'creative', '创意设计相关', '#06b6d4');

-- 插入提示词标签关联
INSERT INTO prompt_tags (prompt_id, tag_id) VALUES
(1, 1), (1, 5),
(2, 2), (2, 5),
(3, 3), (3, 5);

-- 插入系统配置
INSERT INTO system_configs (config_key, config_value, config_type, description, is_public) VALUES
('site_name', 'AI提示词宝库', 'string', '网站名称', TRUE),
('site_description', '发现最佳AI提示词，让您的AI更智能、更高效', 'string', '网站描述', TRUE),
('prompts_per_page', '12', 'integer', '每页显示提示词数量', FALSE),
('allow_user_submit', 'true', 'boolean', '是否允许用户提交提示词', FALSE),
('require_email_verification', 'true', 'boolean', '是否需要邮箱验证', FALSE);

-- ==========================================
-- 视图
-- ==========================================

-- 热门提示词视图
CREATE OR REPLACE VIEW hot_prompts AS
SELECT
    p.prompt_id,
    p.title,
    p.slug,
    p.description,
    p.content,
    p.category_id,
    c.name AS category_name,
    p.author_id,
    u.username AS author_username,
    p.view_count,
    p.use_count,
    p.like_count,
    p.favorite_count,
    p.rating_average,
    p.rating_count,
    p.status,
    p.is_featured,
    p.is_public,
    p.published_at,
    p.created_at,
    p.updated_at
FROM
    prompts p
JOIN
    categories c ON p.category_id = c.category_id
JOIN
    users u ON p.author_id = u.user_id
WHERE
    p.status = 'published'
ORDER BY
    (p.view_count * 0.4 + p.use_count * 0.3 + p.like_count * 0.2 + p.favorite_count * 0.1) DESC
LIMIT 100;

-- 用户统计视图
CREATE OR REPLACE VIEW user_stats AS
SELECT
    u.user_id,
    u.username,
    COUNT(DISTINCT p.prompt_id) AS total_prompts,
    COUNT(DISTINCT uf.favorite_id) AS total_favorites,
    COUNT(DISTINCT ul.like_id) AS total_likes,
    COUNT(DISTINCT ur.rating_id) AS total_ratings,
    COUNT(DISTINCT c.comment_id) AS total_comments
FROM
    users u
LEFT JOIN
    prompts p ON u.user_id = p.author_id
LEFT JOIN
    user_favorites uf ON u.user_id = uf.user_id
LEFT JOIN
    user_likes ul ON u.user_id = ul.user_id
LEFT JOIN
    user_ratings ur ON u.user_id = ur.user_id
LEFT JOIN
    comments c ON u.user_id = c.user_id
GROUP BY
    u.user_id, u.username;

-- 提示词全文搜索视图
CREATE OR REPLACE VIEW prompt_full_text_search AS
SELECT
    prompt_id,
    title,
    description,
    content,
    to_tsvector('english', title || ' ' || description || ' ' || content) AS tsv
FROM
    prompts
WHERE
    status = 'published';

-- ==========================================
-- 创建存储过程 (Stored Procedures)
-- ==========================================

-- 更新提示词统计信息的函数
CREATE OR REPLACE FUNCTION update_prompt_stats(p_prompt_id INT, p_action VARCHAR(10))
RETURNS VOID AS $$
BEGIN
    CASE p_action
        WHEN 'view' THEN
            UPDATE prompts SET view_count = view_count + 1 WHERE prompt_id = p_prompt_id;
        WHEN 'use' THEN
            UPDATE prompts SET use_count = use_count + 1 WHERE prompt_id = p_prompt_id;
        WHEN 'like' THEN
            UPDATE prompts SET like_count = like_count + 1 WHERE prompt_id = p_prompt_id;
        WHEN 'unlike' THEN
            UPDATE prompts SET like_count = GREATEST(like_count - 1, 0) WHERE prompt_id = p_prompt_id;
        WHEN 'favorite' THEN
            UPDATE prompts SET favorite_count = favorite_count + 1 WHERE prompt_id = p_prompt_id;
        WHEN 'unfavorite' THEN
            UPDATE prompts SET favorite_count = GREATEST(favorite_count - 1, 0) WHERE prompt_id = p_prompt_id;
    END CASE;
END;
$$ LANGUAGE plpgsql;

-- 更新提示词评分的函数
CREATE OR REPLACE FUNCTION update_prompt_rating(p_prompt_id INT)
RETURNS VOID AS $$
BEGIN
    UPDATE prompts p
    SET 
        rating_average = (
            SELECT COALESCE(AVG(rating), 0)
            FROM user_ratings 
            WHERE prompt_id = p_prompt_id
        ),
        rating_count = (
            SELECT COUNT(*)
            FROM user_ratings 
            WHERE prompt_id = p_prompt_id
        )
    WHERE p.prompt_id = p_prompt_id;
END;
$$ LANGUAGE plpgsql;



-- ==========================================
-- 创建触发器 (Triggers)
-- ==========================================

-- 用户收藏触发器
CREATE TRIGGER after_favorite_insert
AFTER INSERT ON user_favorites
FOR EACH ROW
EXECUTE FUNCTION update_prompt_stats(NEW.prompt_id, 'favorite');

CREATE TRIGGER after_favorite_delete
AFTER DELETE ON user_favorites
FOR EACH ROW
EXECUTE FUNCTION update_prompt_stats(OLD.prompt_id, 'unfavorite');

-- 用户点赞触发器
CREATE TRIGGER after_like_insert
AFTER INSERT ON user_likes
FOR EACH ROW
EXECUTE FUNCTION update_prompt_stats(NEW.prompt_id, 'like');


CREATE TRIGGER after_like_delete
AFTER DELETE ON user_likes
FOR EACH ROW
EXECUTE FUNCTION update_prompt_stats(OLD.prompt_id, 'unlike');

-- 用户评分触发器
CREATE TRIGGER after_rating_insert
AFTER INSERT ON user_ratings
FOR EACH ROW
EXECUTE FUNCTION update_prompt_rating(NEW.prompt_id);

CREATE TRIGGER after_rating_update
AFTER UPDATE ON user_ratings
FOR EACH ROW
EXECUTE FUNCTION update_prompt_rating(NEW.prompt_id);

CREATE TRIGGER after_rating_delete
AFTER DELETE ON user_ratings
FOR EACH ROW
EXECUTE FUNCTION update_prompt_rating(OLD.prompt_id);



-- ==========================================
-- 创建索引优化
-- ==========================================

-- 为常用查询创建复合索引
CREATE INDEX idx_prompts_category_status ON prompts(category_id, status, published_at);
CREATE INDEX idx_prompts_featured_status ON prompts(is_featured, status, published_at);
CREATE INDEX idx_prompts_hot_score ON prompts(use_count, view_count, like_count, favorite_count);

-- 为全文搜索创建索引
ALTER TABLE prompts ADD FULLTEXT(title, description, content);
ALTER TABLE tags ADD FULLTEXT(name, description);

